#include "controlTask.h"
#include "remoteTask.h"
#include "can.h"
#include "gpio.h"
#include "tim.h"
#include "pid.h"
#include "sineWave.h"
#include "fuzzy.h"
#include "ramp.h"
#include "gun.h"
#include "COM_Task.h"

const float GMControlFreq = 1000.0f; // a parameter of ramping function to translate angular speed into discrete increments
workState_e workState;
frictionState_e fricState = FRIC_STATIC;
uint32_t time_tick_ms = 0;

PID_Regulator_t CM1SpeedPID = CHASSIS_MOTOR_SPEED_PID_DEFAULT;
PID_Regulator_t CM2SpeedPID = CHASSIS_MOTOR_SPEED_PID_DEFAULT;
PID_Regulator_t GMYPositionPID = YAW_POSITION_PID_DEFAULT;
PID_Regulator_t GMPPositionPID = PITCH_POSITION_PID_DEFAULT;
PID_Regulator_t GMYSpeedPID = YAW_SPEED_PID_DEFAULT;
PID_Regulator_t GMPSpeedPID = PITCH_SPEED_PID_DEFAULT;

PID_Regulator_t ShootSpeedPID = SHOOT_SPEED_PID_DEFAULT;
PID_Regulator_t ShootPositionPID = SHOOT_POSITION_PID_DEFAULT;
MotorControlPID_t ShootPID;

extern volatile Encoder CM1Encoder;
extern volatile Encoder CM2Encoder;
extern volatile Encoder GMYawEncoder;
extern volatile Encoder GMPitchEncoder;
extern volatile Encoder ShootEncoder;

extern Chassis_speed_ref_t chassis_speed_ref;
extern float m_INC;
extern PC_Command_t PC_cmd;
extern RC_Ctrl_t RC_CtrlData;

uint32_t getCurrentTimeTick(void)
{
	return time_tick_ms;
}
void setWorkState(workState_e state)
{
	workState = state;
}

workState_e getWorkState(void)
{
	return workState;
}

void workStateFSM(void)
{
	switch(workState)
	{
		case PREPARE_STATE:
			if(getInputMode() == STOP_MODE)
				setWorkState(STOP_STATE);
			else if(time_tick_ms > PREPARE_TIME_TICK_MS)
				setWorkState(NORMAL_STATE);
			break;
			
		case NORMAL_STATE:
			if (getInputMode() == STOP_MODE)
				setWorkState(STOP_STATE);
			break;
		
		case STOP_STATE:
			if(getInputMode() != STOP_MODE)
				setWorkState(PREPARE_STATE);
			break;
		default:;	
	}
}

void CM_Control(void)
{
	float CM_Speed  = 0;
	if(getWorkState() != NORMAL_STATE)
	{
		CM_Speed = 0;
	}
	else
	{
		switch(PC_cmd.Chassis.dir)
		{
			case 0: // stop
			{
				CM_Speed = 0;
			}break;
			case 1: // left_slow
			{
				CM_Speed = -200;
			}break;
			case 2: // left_fast
			{
				CM_Speed = -500;
			}break;
			case 3: // right_slow
			{
				CM_Speed = 200;
			}break;
			case 4: // right_fast
			{
				CM_Speed = 500;
			}break;
			default:
			{
			}
		}
	}
	//CM1SpeedPID.ref =  (-chassis_speed_ref.forward_back_ref*0.075)*3;
	//CM2SpeedPID.ref = (chassis_speed_ref.forward_back_ref*0.075)*3;
	
	CM1SpeedPID.ref = -CM_Speed;
	CM2SpeedPID.ref = CM_Speed;
	
	CM1SpeedPID.fdb = CM1Encoder.filter_rate;
	CM2SpeedPID.fdb = CM2Encoder.filter_rate;
	
	PID_Calc(&CM1SpeedPID);
	PID_Calc(&CM2SpeedPID);
	//set_CM_speed(CM1SpeedPID.output*SPEED_OUTPUT_ATTENUATION,CM2SpeedPID.output*SPEED_OUTPUT_ATTENUATION);
	//set_CM_speed(CM1SpeedPID.output*SPEED_OUTPUT_ATTENUATION,-CM1SpeedPID.output*SPEED_OUTPUT_ATTENUATION);
	//set_CM_speed((int16_t)CM_Speed*4,(int16_t)-CM_Speed*4);
}

float angleLimit(float angle,float lower, float upper)
{
	if(angle<lower) return lower;
	else if(angle>upper) return upper;
	return angle;
	
}

static float yaw_r = 0;
static float pitch_r = 0;
static uint32_t start_time = 0;
static char start_flag = 0;
static float compensate = 0;
static uint8_t c_cnt = 0;
void Gimbal_Control(void)
{
	//RED_LED_ON();
	switch(workState)
	{
		case PREPARE_STATE: // Init state (Yaw,Pitch) = (0,0)
		{
			GMYPositionPID.ref = 0;
			GMYPositionPID.fdb = GMYawEncoder.ecd_angle;
			PID_Calc_Debug(&GMYPositionPID,0.5,0.0002,0); // a debug version of PID_Calc for testing parameters
			GMYSpeedPID.ref = GMYPositionPID.output;
			GMYSpeedPID.fdb = GMYawEncoder.filter_rate;
			PID_Calc_Debug(&GMYSpeedPID,100,0.0001,0);
			
			GMPPositionPID.ref = 0;
			GMPPositionPID.fdb = GMPitchEncoder.ecd_angle;			
			PID_Calc_Debug(&GMPPositionPID,5,0.002,0.0);
			GMPSpeedPID.ref = GMPPositionPID.output;
			GMPSpeedPID.fdb = GMPitchEncoder.filter_rate;
			PID_Calc_Debug(&GMPSpeedPID,20.0,0.0,0.0);
			//set_GM_speed(-GMYSpeedPID.output,-GMPSpeedPID.output);
		}break;
		case NORMAL_STATE:
		{
			yaw_r = angleLimit(PC_cmd.Gimbal.yaw_angle,-150,120);
			getRampedRef(&GMYPositionPID,yaw_r,36.0/GMControlFreq); // get reaped reference
			GMYPositionPID.fdb = GMYawEncoder.ecd_angle;
			PID_Calc_Debug(&GMYPositionPID,20,0.001,0); // a debug version of PID_Calc for testing parameters
			GMYSpeedPID.ref = GMYPositionPID.output;
			GMYSpeedPID.fdb = GMYawEncoder.filter_rate;
			PID_Calc_Debug(&GMYSpeedPID,100,0.0,0);
			//reference = sineWave(30,2,(time_tick_ms-start_time)/1000.0f); // frequency response testing
			//reference += m_INC; // ramp response testing
			pitch_r = angleLimit(PC_cmd.Gimbal.pitch_angle,-30,0);
			getRampedRef(&GMPPositionPID,pitch_r,36.0f/GMControlFreq); // get ramped reference
			GMPPositionPID.fdb = GMPitchEncoder.ecd_angle;			
			//small error:P=5,I=0.01(no windup&limit)
			//fuzzypid(&GMPPositionPID);
			//PID_Calc(&GMPPositionPID);
			PID_Calc_Debug(&GMPPositionPID,19,0.01,0.0);
			GMPSpeedPID.ref = GMPPositionPID.output;
			GMPSpeedPID.fdb = GMPitchEncoder.filter_rate;
			PID_Calc_Debug(&GMPSpeedPID,20.0,0.0,0.0);
			//set_GM_speed(-GMYSpeedPID.output,-GMPSpeedPID.output);
		}break;
		default:
		{
			//set_GM_speed(0,0);
		}
	}
	
		
}

static uint16_t fric_output_s;
// Friction wheel control
void FrictionWheelControl(void)
{
  if(PC_cmd.shoot.fire == 1) //Receive shooting command from odroid
	{
		if(fricState==FRIC_STATIC) fricState = FRIC_ACCELERATING;
	}
	else
	{
		fricState = FRIC_STATIC;
	}
	switch(fricState)
	{
		case FRIC_STATIC:
		{
			SetFrictionWheelSpeed(1000);
		}break;
		case FRIC_ACCELERATING:
		{
			uint16_t fric_output = FrictionRamp(1000,1600,500); // start=1000,end=1600,duration=500ms
			fric_output_s = fric_output;
			if(fric_output==1600)	
				fricState = FRIC_MAX_SPEED;
			else
				SetFrictionWheelSpeed(fric_output);
		}break;
		case FRIC_MAX_SPEED:
		{
			SetFrictionWheelSpeed(1600);
		}break;
	}
}

void Shoot_Control(void)
{
	switch(workState)
	{
		case PREPARE_STATE:
		{
			//InitFrictionWheel();
			
//			ShootPositionPID.ref = 0;
//			ShootPositionPID.fdb = ShootEncoder.ecd_angle;
//			PID_Calc_Debug(&ShootPositionPID,0.5,0,0); // a debug version of PID_Calc for testing parameters
//			ShootSpeedPID.ref = ShootPositionPID.output;
//			ShootSpeedPID.fdb = ShootEncoder.filter_rate;
//			PID_Calc_Debug(&ShootSpeedPID,100,0,0);
		}break;
		case NORMAL_STATE:
		{
<<<<<<< HEAD
			if(PC_cmd.shoot.fire == 1)
			{
				//SetFrictionWheelSpeed(1600); // FrictionWheel spinning
				
			
			ShootSpeedPID.ref = 160;
			ShootSpeedPID.fdb = ShootEncoder.filter_rate;
			PID_Calc_Debug(&GMYSpeedPID,1,0.0,0); 
			set_shoot_speed(ShootSpeedPID.output); //Trigger Motor PID here
			}
			else
			{
				//SetFrictionWheelSpeed(1000); // FrictionWheel stops
				
			ShootSpeedPID.ref = 0;
			ShootSpeedPID.fdb = ShootEncoder.filter_rate;
			PID_Calc_Debug(&ShootSpeedPID,1,0.0,0); 
				set_shoot_speed(0);
				// Trigger Motor stop
			}
		}break;
		case STOP_STATE:
		{
			//SetFrictionWheelSpeed(1000); // FrictionWheel stops
			
			set_shoot_speed(0);	// Trigger Motor stop
=======
			FrictionWheelControl();
			// Trigger Motor PID here
		}break;
		case STOP_STATE:
		{
			SetFrictionWheelSpeed(1000); // FrictionWheel stops
			// Trigger Motor stop
>>>>>>> develop
		}break;
		default:
		{
		}
	}
}

void Control_Loop(void)
{
	time_tick_ms += 1;
	if(time_tick_ms%1000==0)
		//RED_LED_TOGGLE();
	//set_CM_speed(2000,2000,2000,2000);
	workStateFSM();
	if(time_tick_ms%4==0)//250Hz
		CM_Control();
	Gimbal_Control();//1000Hz
	Shoot_Control();
	GMShootControl();//send CAN msg
}
